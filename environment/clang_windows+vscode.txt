LLVM компилятор Clang при работе на Windows опираются на 
библиотеки и заголовочные файлы, предоставляемые ему предустановленными:
	- либо MSVC = MS Visual Compiler (https://code.visualstudio.com/)
      - либо MinGW = Minimalist GNU for Windows (https://www.mingw-w64.org) = provides GCC as a part of itself

Соответственно, для использования Clang на Windows, необходимо:
	- либо предварительно установить MS Visual Studio (MSVC в комплекте)
	- либо предварительно установить MinGW
	- либо установив специальную сборку LLVM


+----------------------------------------------------------------------------------------------------------------------------------------------------+
	
[1] Clang + MS Visual Studio

	> установка Clang		LLVM = https://releases.llvm.org

    	> установка MSVC		MS Visual Studio = https://visualstudio.microsoft.com/vs/

	> связь 			автоматически = Clang при запуске ищет MSVC по дефолтным путям
					использовать флаг 'clang --verbose ...' чтобы получить информацию времени компиляции о работе Clang


+----------------------------------------------------------------------------------------------------------------------------------------------------+


[2] Clang + MinGW

	> установка Clang		LLVM = https://releases.llvm.org
	
	> установка MinGW		см. 'mingw' инструкцию
	
	> связь 			автоматически = Clang при запуске ищет MinGW по дефолтным путям относительно 'bin' (см. выше)
					обратить внимание:
						более высоким приоритетом по умолчанию обладают пути, ведущие к MS Visual Compiler
						пути поиска зависят от clang triplet компонентов	
							информация: https://releases.llvm.org/8.0.0/tools/clang/docs/CrossCompilation.html
							компонент triplet'a = target							
								посмотреть доступные target: 'clang -print-targets'
								посмотреть дефолтный target: 'clang --version'
							компоненнт triplet'a = abi
								msvc = для MSVC
								gnu = для MinGW
						дефолтный target задается в момент копиляции самого LLVM 	
						поменять triplet можно только для конкретной сборки: '--target=<triplet>'
					настройка кросс-компиляции на Clang = https://habr.com/ru/post/599125/


+----------------------------------------------------------------------------------------------------------------------------------------------------+ 	

	
[3] специальная LLVM сборка
	
	скачать предсобранную версию MinGW = https://www.mingw-w64.org/downloads/ >> LLVM + MinGW
	поместить в любое место и использовать напрямую, либо добавив 'bin' директорию в PATH
	обратить внимание:
		все clang'и внутри специальной сборки нацелены искать необходимые библиотеки и заголовочные файлы именно внутри пакета
		clang.exe не имеет дефолтного triplet'a и всегда должен получать его в качестве параметра команды
		каждый специфический <clang>.exe получает информацию о triplet'e из собственного имени

[Warning!] Если в PATH указано сразу два пути до MinGW 'bin' директорий (потому что есть установленый MinGW, см [2]), 
	     может возникнуть ошибка линкера. Причем пути поиска заголовочных файлов совпадают с порядком указания 
           директорий в PATH, но линкер выбирается по-другому = (правило выбора выяснить сейчас не удалось)


+----------------------------------------------------------------------------------------------------------------------------------------------------+ 

VSCode и настройка проекта

	для корректной работы внутренней системы сборки VSCode и IntelliSence помощника, необходимо:
		открыть проект внутри VSCode (обязательно самый корень)
		сочентание Ctrl+Shift+P
		набрать 'edit'
	